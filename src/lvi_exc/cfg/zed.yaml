%YAML:1.0

bag_filename: "/home/wz/dev-sdb/wz/Data/EuRoc/zed_left_imu_slow_move.bag"
#common parameters
imu_topic: "/zed2/zed_node/imu/data"
image_topic: "/zed2/zed_node/left_raw/image_raw_gray"
output_path: "/home/wz/github/ros_env/calib_ws/lidar_imu_calib_ws/output/"

#camera calibration 
model_type: PINHOLE
camera_name: camera
image_width: 1280
image_height: 720
# distortion_parameters:
#    k1: -8.1388769848123571e-02
#    k2: 5.9860788675004287e-02
#    p1: -1.5123862316677543e-03
#    p2: -2.1103086619224515e-04
# projection_parameters:
#    fx: 5.2972230863689776e+02
#    fy: 5.3205191311553529e+02
#    cx: 6.3374371232131637e+02
#    cy: 3.5992043968620527e+02
# distortion_parameters:
#    k1: -8.13887e-02
#    k2: 5.986078e-02
#    p1: -1.512386e-03
#    p2: -2.110308e-04
# projection_parameters:
#    fx: 5.297223e+02
#    fy: 5.320519e+02
#    cx: 6.337437e+02
#    cy: 3.599204e+02

#factory params, left
distortion_parameters:
  k1: -0.0397646985948
  k2: 0.00802944041788
  p1: -0.0043042199686
  p2: -0.0001040279967
  k3: 0.00030608999077

projection_parameters:
  fx: 530.174987792968
  fy: 530.094970703125
  cx: 635.119995117187
  cy: 356.522003173828

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [-0.0039724, -0.08596, 0.996290,
           -0.999237279, -0.0383621, -0.007294337, 
           0.0388468, -0.9955593, -0.08574728784]
#Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [-0.00200000009499,-0.02300000377, -0.00200000009499]
 
window_size: 10
#feature traker paprameters
max_cnt: 150            # max feature number in feature tracking
min_dist: 30            # min distance between two features 
freq: 20                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 1              # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.08          # accelerometer measurement noise standard deviation. #0.2   0.04
gyr_n: 0.004         # gyroscope measurement noise standard deviation.     #0.05  0.004
acc_w: 0.00004         # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 2.0e-6       # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.81007     # gravity magnitude

#loop closure parameters
loop_closure: 1                    # start loop closure
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
fast_relocalization: 0             # useful in real-time and large project
pose_graph_save_path: "/home/shaozu/output/pose_graph/" # save and load path

#unsynchronization parameters
estimate_td: 0                      # online estimate time offset between camera and imu
td: 0.0                             # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ
